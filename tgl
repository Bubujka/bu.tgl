#!/usr/bin/env node

'use strict';

const TogglClient = require('toggl-api');
const program = require('commander');
const exec = require('child_process').exec;
const nn = require('node-notifier');

const toggl = new TogglClient({ apiToken: process.env.TOGGL_API_TOKEN });

function notify(what, color) {
  if (!color) {
    color = 'white';
  }
  nn.notify({
    title: 'Toggl client',
    message: what,
  });
}

function add(duration, description, prg) {
  toggl.createTimeEntry({
    wid: prg.wid,
    start: new Date,
    billable: true,
    description: description.join(' '),
    duration,
  }, (err) => {
    if (err) {
      throw err;
    } else {
      notify('Запись в тоггл добавлена', 'green');
    }
  });
}

function start(what, prg) {
  toggl.startTimeEntry({
    wid: prg.wid,
    billable: true,
    description: what,
  }, (err) => {
    if (err) {
      throw err;
    } else {
      notify('Новая задача в toggl поставлена', 'green');
    }
  });
}


function stop() {
  toggl.getCurrentTimeEntry((err, entry) => {
    if (err) {
      console.error(err); // eslint-disable-line
    } else if (entry) {
      toggl.stopTimeEntry(entry.id, (err) => {
        if (err) {
          console.error(err); // eslint-disable-line
        } else {
          notify('Остановили toggl', 'red');
        }
      });
    } else {
      notify('Остановили toggl', 'red');
    }
  });
}

program.version('0.0.1');

program
  .command('start <what>')
  .option('-w, --wid [wid]', 'Workspace [wid]', process.env.TOGGL_DEFAULT_WID)
  .description('start new time entry with <what> description')
  .action(start);

program
  .command('add <seconds> <what...>')
  .option('-w, --wid [wid]', 'Workspace [wid]', process.env.TOGGL_DEFAULT_WID)
  .description('add new time entry with <what> description')
  .action(add);

program
  .command('stop')
  .description('stop latest time entry') .action(stop);

program
  .command('puffy')
  .option('-a, --accounts [items]', 'Show selection from accounts')
  .option('-w, --wid [wid]', 'Workspace [wid]', process.env.TOGGL_DEFAULT_WID)
  .description('start new time entry with <what> description')
  .action((prg) => {
    let accounts;
    if (prg.accounts) {
      accounts = prg.accounts.split(',').join(' ');
    } else {
      accounts = '';
    }
    const cmd =
      `puffy my ${accounts} |` +
      ' awk \'{print tolower($0)}\' |' +
      ` dmenu-wrapper "Toggl (${accounts})" 40`;
    exec(cmd, (err, stdout) => {
      if (stdout !== '') {
        start(stdout, prg);
      }
    });
  });

program.parse(process.argv);

if (!program.args.length) {
  exec('puffy my | dmenu-wrapper Toggl 40', (err, stdout) => {
    if (err) {
      stop();
    }
    if (stdout === '') {
      stop();
    } else {
      start(stdout);
    }
  });
}
