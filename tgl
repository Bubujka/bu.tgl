#!/usr/bin/env node

var TogglClient = require('toggl-api'),
    toggl = new TogglClient({apiToken: process.env.TOGGL_API_TOKEN}),
    program = require('commander'),
    exec = require('child_process').exec,
    child;

function _notify(what, color){
  if(!color){
    color = 'white';
  }
  exec('echo "'+ what + '" | dzen2-wrapper '+ color);
}

function _start(what, program){
  toggl.startTimeEntry({
    wid: program.wid,
    description: what,
  }, function(err){
    if(err){
      return console.error(err);
    }
    _notify('Новая задача в toggl поставлена', 'green');
  });
}

function _stop(){
  toggl.getCurrentTimeEntry(function(err, entry){
    if(err){
      return console.error(err);
    }
    if(entry){
      toggl.stopTimeEntry(entry.id, function(err){
        if(err){
          return console.error(err);
        }
        _notify('Остановили toggl', 'red');
      });
    }else{
      _notify('Остановили toggl', 'red');
    }
  });
}

program.version('0.0.1');

program
  .command('start <what>')
  .option('-w, --wid [wid]', 'Workspace [wid]', process.env.TOGGL_DEFAULT_WID)
  .description('start new time entry with <what> description')
  .action(_start);

program
  .command('stop')
  .description('stop latest time entry')
  .action(_stop);

program
  .command('puffy')
  .option('-a, --accounts [items]', 'Show selection from accounts')
  .option('-w, --wid [wid]', 'Workspace [wid]', process.env.TOGGL_DEFAULT_WID)
  .description('start new time entry with <what> description')
  .action(function(program){
    var accounts = program.accounts.split(',').join(' ');
    var cmd = 
      'puffy my '+accounts+' |'+
      ' awk \'{print tolower($0)}\' |'+
      ' dmenu-wrapper "Toggl ('+accounts+')" 40';
    child = exec(cmd, function(err, stdout){
      if(stdout !== ''){
        _start(stdout, program);
      }
    });
  });

program.parse(process.argv);

if (!program.args.length){
  child = exec('puffy my | dmenu-wrapper Toggl 40', function(err, stdout){
    if(err){
      _stop();
    }
    if(stdout === ''){
      _stop();
    }else{
      _start(stdout);
    }
  });
}
